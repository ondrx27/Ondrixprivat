const {
  Connection,
  PublicKey,
  Keypair,
  LAMPORTS_PER_SOL,
  Transaction,
  sendAndConfirmTransaction,
} = require('@solana/web3.js');
const {
  createMint,
  getOrCreateAssociatedTokenAccount,
  mintTo,
} = require('@solana/spl-token');
const {
  PROGRAM_ID,
  findGlobalEscrowPDA,
  findInvestorPDA,
  findSolVaultPDA,
  createInitializeEscrowInstruction,
  createDepositSolInstruction,
  createWithdrawLockedSolInstruction,
  sleep,
} = require('../../dist/tests/utils.js');

const connection = new Connection('https://api.devnet.solana.com', 'confirmed');

// –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏
const INVESTOR1_PRIVATE = 'rKAMdrQgnE3zvQdLK4MtXBQqvwhMLoDnbgyAM7heWeM3pUoyA6sWFLSixp2dySt3SiYskQdaU6wKHNh1X3r77pZ';
const INVESTOR2_PRIVATE = '5pKECKQTz61EjiA6bgUj82EgKqmR3DCmWvKHoBhTC3NxXMPwAccfVwbWXr2QVedgbWanDsZQpxPPujtVi7TWZRMp';
const RECIPIENT_PRIVATE = '37yWdyP1E8sVqRpVEK5Y3cFHuDggnbPEuXGR7zDo4PxbDZwTBCcTNK3bZwErTuNfB3Nn6NLtHqxgzNLCNSPRxsXN';

// –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base58
function decodeBase58(encoded) {
  const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
  const BASE = 58;
  
  let num = 0n;
  for (let i = 0; i < encoded.length; i++) {
    const char = encoded[i];
    const index = ALPHABET.indexOf(char);
    if (index === -1) throw new Error('Invalid character in base58 string');
    num = num * BigInt(BASE) + BigInt(index);
  }
  
  let hex = num.toString(16);
  if (hex.length % 2 !== 0) hex = '0' + hex;
  
  const bytes = [];
  for (let i = 0; i < hex.length; i += 2) {
    bytes.push(parseInt(hex.substr(i, 2), 16));
  }
  
  return new Uint8Array(bytes);
}

async function main() {
  console.log('üß™ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ESCROW (2 –ú–ò–ù–£–¢–´ –ë–õ–û–ö–ò–†–û–í–ö–ò)');
  console.log('='.repeat(80));
  console.log(`üìç Program ID: ${PROGRAM_ID.toString()}`);
  
  // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∫–ª—é—á–∏
  const investor1 = Keypair.fromSecretKey(decodeBase58(INVESTOR1_PRIVATE));
  const investor2 = Keypair.fromSecretKey(decodeBase58(INVESTOR2_PRIVATE));
  const recipient = Keypair.fromSecretKey(decodeBase58(RECIPIENT_PRIVATE));
  
  console.log(`üë§ Investor1/Initializer: ${investor1.publicKey.toString()}`);
  console.log(`üë§ Investor2: ${investor2.publicKey.toString()}`);
  console.log(`üéØ Recipient: ${recipient.publicKey.toString()}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
  const investor1Balance = await connection.getBalance(investor1.publicKey);
  const investor2Balance = await connection.getBalance(investor2.publicKey);
  const recipientBalanceStart = await connection.getBalance(recipient.publicKey);
  
  console.log('\nüí∞ –ù–ê–ß–ê–õ–¨–ù–´–ï –ë–ê–õ–ê–ù–°–´:');
  console.log(`Investor1: ${investor1Balance / LAMPORTS_PER_SOL} SOL`);
  console.log(`Investor2: ${investor2Balance / LAMPORTS_PER_SOL} SOL`);
  console.log(`Recipient: ${recipientBalanceStart / LAMPORTS_PER_SOL} SOL`);
  
  try {
    // ========== –≠–¢–ê–ü 1: –°–û–ó–î–ê–ù–ò–ï –¢–û–ö–ï–ù–ê –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==========
    console.log('\nü™ô –≠–¢–ê–ü 1: –°–û–ó–î–ê–ù–ò–ï –¢–û–ö–ï–ù–ê –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ESCROW');
    console.log('-'.repeat(60));
    
    const tokenMint = await createMint(
      connection,
      investor1,
      investor1.publicKey,
      null,
      9
    );
    console.log(`‚úÖ Token Mint: ${tokenMint.toString()}`);
    
    const initializerTokenAccount = await getOrCreateAssociatedTokenAccount(
      connection,
      investor1,
      tokenMint,
      investor1.publicKey
    );
    
    const tokenSupply = BigInt(1000000 * Math.pow(10, 9));
    await mintTo(
      connection,
      investor1,
      tokenMint,
      initializerTokenAccount.address,
      investor1,
      tokenSupply
    );
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ 1M —Ç–æ–∫–µ–Ω–æ–≤`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å 2-–º–∏–Ω—É—Ç–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    const lockDuration = BigInt(120); // 2 –º–∏–Ω—É—Ç—ã –∫–∞–∫ –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const tokenAmountForEscrow = BigInt(500000 * Math.pow(10, 9));
    
    const currentTime = Math.floor(Date.now() / 1000);
    const unlockTime = currentTime + Number(lockDuration);
    
    console.log(`‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${currentTime}`);
    console.log(`üîí –í—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${Number(lockDuration)} —Å–µ–∫—É–Ω–¥`);
    console.log(`üîì –í—Ä–µ–º—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${unlockTime}`);
    console.log(`üìÖ –î–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${new Date(unlockTime * 1000).toLocaleString()}`);
    
    const initializeInstruction = await createInitializeEscrowInstruction(
      investor1.publicKey,
      tokenMint,
      initializerTokenAccount.address,
      recipient.publicKey,
      tokenAmountForEscrow,
      lockDuration,
      PROGRAM_ID
    );
    
    const initTransaction = new Transaction().add(initializeInstruction);
    const initTxSignature = await sendAndConfirmTransaction(
      connection,
      initTransaction,
      [investor1],
      { commitment: 'confirmed' }
    );
    console.log(`‚úÖ Escrow –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${initTxSignature}`);
    
    const [globalEscrowPDA] = findGlobalEscrowPDA(investor1.publicKey, tokenMint, PROGRAM_ID);
    console.log(`üìç Global Escrow PDA: ${globalEscrowPDA.toString()}`);
    
    // ========== –≠–¢–ê–ü 2: –ü–ï–†–í–´–ô –ò–ù–í–ï–°–¢–û–† ==========
    console.log('\nüí∞ –≠–¢–ê–ü 2: –ü–ï–†–í–´–ô –ò–ù–í–ï–°–¢–û–† (INVESTOR1)');
    console.log('-'.repeat(60));
    
    const investor1DepositAmount = BigInt(0.1 * LAMPORTS_PER_SOL); // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 0.1 SOL
    console.log(`üí∏ Investor1 –¥–µ–ø–æ–∑–∏—Ç–∏—Ç: ${investor1DepositAmount / BigInt(LAMPORTS_PER_SOL)} SOL`);
    
    const depositInstruction1 = await createDepositSolInstruction(
      investor1.publicKey,
      globalEscrowPDA,
      tokenMint,
      recipient.publicKey,
      investor1DepositAmount,
      PROGRAM_ID
    );
    
    const depositTransaction1 = new Transaction().add(depositInstruction1);
    const depositTx1 = await sendAndConfirmTransaction(
      connection,
      depositTransaction1,
      [investor1],
      { commitment: 'confirmed' }
    );
    console.log(`‚úÖ Investor1 –¥–µ–ø–æ–∑–∏—Ç: ${depositTx1}`);
    
    // ========== –≠–¢–ê–ü 3: –í–¢–û–†–û–ô –ò–ù–í–ï–°–¢–û–† ==========
    console.log('\nüí∞ –≠–¢–ê–ü 3: –í–¢–û–†–û–ô –ò–ù–í–ï–°–¢–û–† (INVESTOR2)');
    console.log('-'.repeat(60));
    
    const investor2DepositAmount = BigInt(0.5 * LAMPORTS_PER_SOL); // –£–º–µ–Ω—å—à–∞–µ–º –¥–æ 0.5 SOL
    console.log(`üí∏ Investor2 –¥–µ–ø–æ–∑–∏—Ç–∏—Ç: ${investor2DepositAmount / BigInt(LAMPORTS_PER_SOL)} SOL`);
    
    const depositInstruction2 = await createDepositSolInstruction(
      investor2.publicKey,
      globalEscrowPDA,
      tokenMint,
      recipient.publicKey,
      investor2DepositAmount,
      PROGRAM_ID
    );
    
    const depositTransaction2 = new Transaction().add(depositInstruction2);
    const depositTx2 = await sendAndConfirmTransaction(
      connection,
      depositTransaction2,
      [investor2],
      { commitment: 'confirmed' }
    );
    console.log(`‚úÖ Investor2 –¥–µ–ø–æ–∑–∏—Ç: ${depositTx2}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º SOL vaults
    const [investor1PDA] = findInvestorPDA(investor1.publicKey, globalEscrowPDA, PROGRAM_ID);
    const [investor2PDA] = findInvestorPDA(investor2.publicKey, globalEscrowPDA, PROGRAM_ID);
    const [solVault1PDA] = findSolVaultPDA(investor1.publicKey, globalEscrowPDA, PROGRAM_ID);
    const [solVault2PDA] = findSolVaultPDA(investor2.publicKey, globalEscrowPDA, PROGRAM_ID);
    
    const solVault1Balance = await connection.getBalance(solVault1PDA);
    const solVault2Balance = await connection.getBalance(solVault2PDA);
    const recipientBalanceAfterDeposits = await connection.getBalance(recipient.publicKey);
    
    console.log(`\nüìä –°–û–°–¢–û–Ø–ù–ò–ï –ü–û–°–õ–ï –î–ï–ü–û–ó–ò–¢–û–í:`);
    console.log(`üîí SOL Vault 1: ${solVault1Balance / LAMPORTS_PER_SOL} SOL (50% –æ—Ç 0.1 = 0.05 SOL)`);
    console.log(`üîí SOL Vault 2: ${solVault2Balance / LAMPORTS_PER_SOL} SOL (50% –æ—Ç 0.5 = 0.25 SOL)`);
    console.log(`üí∞ Recipient –ø–æ–ª—É—á–∏–ª: ${(recipientBalanceAfterDeposits - recipientBalanceStart) / LAMPORTS_PER_SOL} SOL (50% –æ—Ç –æ–±–æ–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤ = 0.3 SOL)`);
    
    // ========== –≠–¢–ê–ü 4: –ü–û–ü–´–¢–ö–ê –†–ê–ù–ù–ï–ì–û –í–´–í–û–î–ê (–î–û–õ–ñ–ù–ê –ë–õ–û–ö–ò–†–û–í–ê–¢–¨–°–Ø) ==========
    console.log('\n‚ùå –≠–¢–ê–ü 4: –ü–û–ü–´–¢–ö–ê –†–ê–ù–ù–ï–ì–û –í–´–í–û–î–ê (–î–û–õ–ñ–ù–ê –ë–õ–û–ö–ò–†–û–í–ê–¢–¨–°–Ø)');
    console.log('-'.repeat(60));
    
    const timeNow = Math.floor(Date.now() / 1000);
    const timeLeft = unlockTime - timeNow;
    console.log(`‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${timeNow}`);
    console.log(`‚è≥ –î–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${timeLeft} —Å–µ–∫—É–Ω–¥`);
    
    try {
      const withdrawInstruction1 = await createWithdrawLockedSolInstruction(
        investor1.publicKey, // withdrawer (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å initializer)
        globalEscrowPDA,
        investor1PDA,
        investor1.publicKey,
        recipient.publicKey,
        PROGRAM_ID
      );
      
      const withdrawTransaction1 = new Transaction().add(withdrawInstruction1);
      await sendAndConfirmTransaction(
        connection,
        withdrawTransaction1,
        [investor1],
        { commitment: 'confirmed' }
      );
      
      console.log('‚ùå –û–®–ò–ë–ö–ê: –†–∞–Ω–Ω–∏–π –≤—ã–≤–æ–¥ –ù–ï –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª—Å—è! –≠—Ç–æ —É—è–∑–≤–∏–º–æ—Å—Ç—å!');
      
    } catch (error) {
      console.log('‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –†–∞–Ω–Ω–∏–π –≤—ã–≤–æ–¥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!');
      console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
      if (error.logs) {
        error.logs.forEach(log => {
          if (log.includes('SOL still locked') || log.includes('SolStillLocked')) {
            console.log('‚úÖ –ü—Ä–∏—á–∏–Ω–∞: SOL –µ—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏');
          }
        });
      }
    }
    
    // ========== –≠–¢–ê–ü 5: –û–ñ–ò–î–ê–ù–ò–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ò ==========
    console.log('\n‚è≥ –≠–¢–ê–ü 5: –û–ñ–ò–î–ê–ù–ò–ï –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ò...');
    console.log('-'.repeat(60));
    
    const waitTime = Math.max(0, timeLeft + 10); // +10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
    if (waitTime > 0) {
      console.log(`‚åõ –ñ–¥–µ–º ${waitTime} —Å–µ–∫—É–Ω–¥ –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏...`);
      await sleep(waitTime * 1000);
    }
    
    const finalTime = Math.floor(Date.now() / 1000);
    console.log(`‚úÖ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${finalTime}, –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞: ${unlockTime}`);
    
    // ========== –≠–¢–ê–ü 6: –£–°–ü–ï–®–ù–´–ô –í–´–í–û–î –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–• SOL ==========
    console.log('\n‚úÖ –≠–¢–ê–ü 6: –í–´–í–û–î –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–• SOL (–î–û–õ–ñ–ï–ù –£–°–ü–ï–®–ù–û –ü–†–û–ô–¢–ò)');
    console.log('-'.repeat(60));
    
    const recipientBalanceBeforeWithdraw = await connection.getBalance(recipient.publicKey);
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å recipient –¥–æ –≤—ã–≤–æ–¥–∞: ${recipientBalanceBeforeWithdraw / LAMPORTS_PER_SOL} SOL`);
    
    try {
      // –í—ã–≤–æ–¥–∏–º SOL –æ—Ç investor1
      console.log('üîì –í—ã–≤–æ–¥–∏–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SOL –æ—Ç Investor1...');
      const withdrawInstruction1Final = await createWithdrawLockedSolInstruction(
        investor1.publicKey,
        globalEscrowPDA,
        investor1PDA,
        investor1.publicKey,
        recipient.publicKey,
        PROGRAM_ID
      );
      
      const withdrawTransaction1Final = new Transaction().add(withdrawInstruction1Final);
      const withdrawTx1 = await sendAndConfirmTransaction(
        connection,
        withdrawTransaction1Final,
        [investor1],
        { commitment: 'confirmed' }
      );
      console.log(`‚úÖ Investor1 SOL –≤—ã–≤–µ–¥–µ–Ω—ã: ${withdrawTx1}`);
      
      // –í—ã–≤–æ–¥–∏–º SOL –æ—Ç investor2
      console.log('üîì –í—ã–≤–æ–¥–∏–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SOL –æ—Ç Investor2...');
      const withdrawInstruction2Final = await createWithdrawLockedSolInstruction(
        investor1.publicKey, // initializer –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç
        globalEscrowPDA,
        investor2PDA,
        investor2.publicKey,
        recipient.publicKey,
        PROGRAM_ID
      );
      
      const withdrawTransaction2Final = new Transaction().add(withdrawInstruction2Final);
      const withdrawTx2 = await sendAndConfirmTransaction(
        connection,
        withdrawTransaction2Final,
        [investor1],
        { commitment: 'confirmed' }
      );
      console.log(`‚úÖ Investor2 SOL –≤—ã–≤–µ–¥–µ–Ω—ã: ${withdrawTx2}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
      const recipientBalanceFinal = await connection.getBalance(recipient.publicKey);
      const solVault1BalanceFinal = await connection.getBalance(solVault1PDA);
      const solVault2BalanceFinal = await connection.getBalance(solVault2PDA);
      
      console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
      console.log(`üí∞ Recipient –±–∞–ª–∞–Ω—Å –¥–æ: ${recipientBalanceBeforeWithdraw / LAMPORTS_PER_SOL} SOL`);
      console.log(`üí∞ Recipient –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: ${recipientBalanceFinal / LAMPORTS_PER_SOL} SOL`);
      console.log(`üìà Recipient –ø–æ–ª—É—á–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: ${(recipientBalanceFinal - recipientBalanceBeforeWithdraw) / LAMPORTS_PER_SOL} SOL`);
      console.log(`üîí SOL Vault 1 —Ñ–∏–Ω–∞–ª: ${solVault1BalanceFinal / LAMPORTS_PER_SOL} SOL (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ~0)`);
      console.log(`üîí SOL Vault 2 —Ñ–∏–Ω–∞–ª: ${solVault2BalanceFinal / LAMPORTS_PER_SOL} SOL (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ~0)`);
      
      const expectedWithdrawals = (investor1DepositAmount + investor2DepositAmount) / 2n; // 50% –æ—Ç –æ–±–æ–∏—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤
      const actualWithdrawals = BigInt(recipientBalanceFinal - recipientBalanceBeforeWithdraw);
      
      console.log(`\nüîç –ü–†–û–í–ï–†–ö–ê –°–£–ú–ú:`);
      console.log(`–û–∂–∏–¥–∞–ª–æ—Å—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö SOL: ${expectedWithdrawals / BigInt(LAMPORTS_PER_SOL)} SOL`);
      console.log(`–ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ: ${actualWithdrawals / BigInt(LAMPORTS_PER_SOL)} SOL`);
      console.log(`–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ: ${expectedWithdrawals === actualWithdrawals ? '‚úÖ –¢–û–ß–ù–û–ï' : '‚ùì –ü–†–û–í–ï–†–ò–¢–¨'}`);
      
      console.log('\nüéâ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
      console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: OK');
      console.log('‚úÖ –î–µ–ø–æ–∑–∏—Ç—ã (50/50 split): OK');
      console.log('‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã–≤–æ–¥–∞: OK');
      console.log('‚úÖ –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏: OK');
      console.log('‚úÖ –°—É–º–º—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: OK');
      
    } catch (error) {
      console.error('‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö SOL:', error.message);
      if (error.logs) {
        console.log('üìú –õ–æ–≥–∏:');
        error.logs.forEach(log => console.log(`   ${log}`));
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    if (error.logs) {
      console.log('üìú –õ–æ–≥–∏:');
      error.logs.forEach(log => console.log(`   ${log}`));
    }
  }
}

main().catch(console.error);