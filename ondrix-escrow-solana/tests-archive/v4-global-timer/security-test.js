const {
  Connection,
  PublicKey,
  Keypair,
  LAMPORTS_PER_SOL,
  Transaction,
  sendAndConfirmTransaction,
} = require('@solana/web3.js');
const {
  PROGRAM_ID,
  findGlobalEscrowPDA,
  findInvestorPDA,
  findSolVaultPDA,
  createWithdrawLockedSolInstruction,
} = require('../../dist/tests/utils.js');

const connection = new Connection('https://api.devnet.solana.com', 'confirmed');

// –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏
const INVESTOR1_PRIVATE = 'rKAMdrQgnE3zvQdLK4MtXBQqvwhMLoDnbgyAM7heWeM3pUoyA6sWFLSixp2dySt3SiYskQdaU6wKHNh1X3r77pZ';
const INVESTOR2_PRIVATE = '5pKECKQTz61EjiA6bgUj82EgKqmR3DCmWvKHoBhTC3NxXMPwAccfVwbWXr2QVedgbWanDsZQpxPPujtVi7TWZRMp';
const RECIPIENT_PRIVATE = '37yWdyP1E8sVqRpVEK5Y3cFHuDggnbPEuXGR7zDo4PxbDZwTBCcTNK3bZwErTuNfB3Nn6NLtHqxgzNLCNSPRxsXN';

// –î–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ—Å—Ç–∞
const TOKEN_MINT = new PublicKey('3iL82t5vRoddSWqadejp1BkMLAt4eX4RQgywFQi15tMC');
const GLOBAL_ESCROW_PDA = new PublicKey('GkxG4WyoSG3Ux9DtMrCdhwMgZ1dRTXX2DE18YrMicsig');

// –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base58
function decodeBase58(encoded) {
  const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
  const BASE = 58;
  
  let num = 0n;
  for (let i = 0; i < encoded.length; i++) {
    const char = encoded[i];
    const index = ALPHABET.indexOf(char);
    if (index === -1) throw new Error('Invalid character in base58 string');
    num = num * BigInt(BASE) + BigInt(index);
  }
  
  let hex = num.toString(16);
  if (hex.length % 2 !== 0) hex = '0' + hex;
  
  const bytes = [];
  for (let i = 0; i < hex.length; i += 2) {
    bytes.push(parseInt(hex.substr(i, 2), 16));
  }
  
  return new Uint8Array(bytes);
}

async function main() {
  console.log('üõ°Ô∏è  SECURITY –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï - UNAUTHORIZED WITHDRAW');
  console.log('='.repeat(70));
  console.log(`üìç Program ID: ${PROGRAM_ID.toString()}`);
  console.log(`ü™ô Token Mint: ${TOKEN_MINT.toString()}`);
  console.log(`üè¶ Global Escrow: ${GLOBAL_ESCROW_PDA.toString()}`);
  
  const investor1 = Keypair.fromSecretKey(decodeBase58(INVESTOR1_PRIVATE));
  const investor2 = Keypair.fromSecretKey(decodeBase58(INVESTOR2_PRIVATE));
  const recipient = Keypair.fromSecretKey(decodeBase58(RECIPIENT_PRIVATE));
  
  console.log(`üë§ Investor1/Initializer: ${investor1.publicKey.toString()}`);
  console.log(`üë§ Investor2: ${investor2.publicKey.toString()}`);
  console.log(`üéØ Recipient: ${recipient.publicKey.toString()}`);
  
  try {
    // –ù–∞—Ö–æ–¥–∏–º PDA
    const [investor1PDA] = findInvestorPDA(investor1.publicKey, GLOBAL_ESCROW_PDA, PROGRAM_ID);
    const [investor2PDA] = findInvestorPDA(investor2.publicKey, GLOBAL_ESCROW_PDA, PROGRAM_ID);
    const [solVault1PDA] = findSolVaultPDA(investor1.publicKey, GLOBAL_ESCROW_PDA, PROGRAM_ID);
    const [solVault2PDA] = findSolVaultPDA(investor2.publicKey, GLOBAL_ESCROW_PDA, PROGRAM_ID);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã
    const solVault1Balance = await connection.getBalance(solVault1PDA);
    const solVault2Balance = await connection.getBalance(solVault2PDA);
    const recipientBalance = await connection.getBalance(recipient.publicKey);
    
    console.log(`\nüí∞ –¢–ï–ö–£–©–ò–ï –ë–ê–õ–ê–ù–°–´:`);
    console.log(`üîí SOL Vault 1: ${solVault1Balance / LAMPORTS_PER_SOL} SOL`);
    console.log(`üîí SOL Vault 2: ${solVault2Balance / LAMPORTS_PER_SOL} SOL`);
    console.log(`üéØ Recipient: ${recipientBalance / LAMPORTS_PER_SOL} SOL`);
    
    // SECURITY TEST 1: Investor2 –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ SOL –æ—Ç Investor1
    console.log(`\nüö® SECURITY TEST 1: Investor2 –ø—ã—Ç–∞–µ—Ç—Å—è —É–∫—Ä–∞—Å—Ç—å SOL –æ—Ç Investor1`);
    console.log(`-`.repeat(70));
    
    const maliciousWithdraw1 = await createWithdrawLockedSolInstruction(
      investor2.publicKey,   // üö® –ó–õ–û–£–ú–´–®–õ–ï–ù–ù–ò–ö: investor2 –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ 
      GLOBAL_ESCROW_PDA,
      investor1PDA,          // üéØ –¶–ï–õ–¨: SOL –æ—Ç investor1
      investor1.publicKey,   // investor1's SOL vault
      investor2.publicKey,   // üö® –ù–ê –°–í–û–ô –ö–û–®–ï–õ–ï–ö!
      PROGRAM_ID
    );
    
    const maliciousTx1 = new Transaction().add(maliciousWithdraw1);
    
    console.log(`üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º: Investor2 ‚Üí –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–±—Ä–∞—Ç—å SOL –æ—Ç Investor1 —Å–µ–±–µ...`);
    const maliciousSimulation1 = await connection.simulateTransaction(maliciousTx1, [investor2]);
    
    if (maliciousSimulation1.value.err) {
      console.log('‚úÖ –ó–ê–©–ò–¢–ê –†–ê–ë–û–¢–ê–ï–¢: –ü–æ–ø—ã—Ç–∫–∞ –∫—Ä–∞–∂–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!');
      console.log(`   Error: ${JSON.stringify(maliciousSimulation1.value.err)}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      if (maliciousSimulation1.value.err.InstructionError) {
        const [_, error] = maliciousSimulation1.value.err.InstructionError;
        if (error.Custom === 5) {
          console.log(`   üîí –ü—Ä–∏—á–∏–Ω–∞: Unauthorized (error 0x5) - —Ç–æ–ª—å–∫–æ initializer/recipient –º–æ–≥—É—Ç –≤—ã–≤–æ–¥–∏—Ç—å`);
        }
      }
    } else {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨: –ö—Ä–∞–∂–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üö® –ö–û–ù–¢–†–ê–ö–¢ –ù–ï–ë–ï–ó–û–ü–ê–°–ï–ù –î–õ–Ø MAINNET!');
    }
    
    // SECURITY TEST 2: Investor2 –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ SOL –Ω–∞ —á—É–∂–æ–π –∫–æ—à–µ–ª–µ–∫  
    console.log(`\nüö® SECURITY TEST 2: Investor2 –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ SOL –Ω–∞ —á—É–∂–æ–π –∫–æ—à–µ–ª–µ–∫`);
    console.log(`-`.repeat(70));
    
    const maliciousWithdraw2 = await createWithdrawLockedSolInstruction(
      investor2.publicKey,   // withdrawer: —Å–∞–º investor2 (—ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
      GLOBAL_ESCROW_PDA,
      investor2PDA,          // –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π investor PDA
      investor2.publicKey,   // –µ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π SOL vault  
      investor1.publicKey,   // üö® –ù–û –ù–ê –ß–£–ñ–û–ô –ö–û–®–ï–õ–ï–ö! (–Ω–µ recipient!)
      PROGRAM_ID
    );
    
    const maliciousTx2 = new Transaction().add(maliciousWithdraw2);
    
    console.log(`üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º: Investor2 ‚Üí –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–∏ SOL –Ω–∞ –∫–æ—à–µ–ª–µ–∫ Investor1...`);
    const maliciousSimulation2 = await connection.simulateTransaction(maliciousTx2, [investor2]);
    
    if (maliciousSimulation2.value.err) {
      console.log('‚úÖ –ó–ê–©–ò–¢–ê –†–ê–ë–û–¢–ê–ï–¢: –ü–æ–ø—ã—Ç–∫–∞ redirect –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!');
      console.log(`   Error: ${JSON.stringify(maliciousSimulation2.value.err)}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      if (maliciousSimulation2.value.err.InstructionError) {
        const [_, error] = maliciousSimulation2.value.err.InstructionError;
        if (error.Custom === 5) {
          console.log(`   üîí –ü—Ä–∏—á–∏–Ω–∞: Unauthorized (error 0x5) - SOL –º–æ–≥—É—Ç –∏–¥—Ç–∏ —Ç–æ–ª—å–∫–æ recipient'—É`);
        }
      }
    } else {
      console.log('‚ùå –£–Ø–ó–í–ò–ú–û–°–¢–¨: SOL –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ recipient-—É!');
      console.log('‚ö†Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
    }
    
    // SECURITY TEST 3: –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ SOL
    console.log(`\nüö® SECURITY TEST 3: –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ SOL`);
    console.log(`-`.repeat(70));
    
    // –°–æ–∑–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
    const randomAttacker = Keypair.generate();
    console.log(`üé≠ –°–ª—É—á–∞–π–Ω—ã–π –∑–ª–æ—É–º—ã—à–ª–µ–Ω–Ω–∏–∫: ${randomAttacker.publicKey.toString()}`);
    
    const maliciousWithdraw3 = await createWithdrawLockedSolInstruction(
      randomAttacker.publicKey, // üö® –ó–õ–û–£–ú–´–®–õ–ï–ù–ù–ò–ö: —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      GLOBAL_ESCROW_PDA,
      investor1PDA,             // –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–≤–µ—Å—Ç–∏ SOL –æ—Ç investor1
      investor1.publicKey,
      randomAttacker.publicKey, // üö® –ù–ê –°–í–û–ô –ö–û–®–ï–õ–ï–ö!
      PROGRAM_ID
    );
    
    const maliciousTx3 = new Transaction().add(maliciousWithdraw3);
    
    console.log(`üß™ –°–∏–º—É–ª–∏—Ä—É–µ–º: –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí –ø—ã—Ç–∞–µ—Ç—Å—è —É–∫—Ä–∞—Å—Ç—å SOL...`);
    const maliciousSimulation3 = await connection.simulateTransaction(maliciousTx3, [randomAttacker]);
    
    if (maliciousSimulation3.value.err) {
      console.log('‚úÖ –ó–ê–©–ò–¢–ê –†–ê–ë–û–¢–ê–ï–¢: –ü–æ–ø—ã—Ç–∫–∞ –∫—Ä–∞–∂–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!');
      console.log(`   Error: ${JSON.stringify(maliciousSimulation3.value.err)}`);
    } else {
      console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨: –°–ª—É—á–∞–π–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∫—Ä–∞—Å—Ç—å SOL!');
      console.log('üö® –ö–û–ù–¢–†–ê–ö–¢ –ö–†–ê–ô–ù–ï –ù–ï–ë–ï–ó–û–ü–ê–°–ï–ù!');
    }
    
    // –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï
    console.log(`\nüìä –ò–¢–û–ì–û–í–´–ô SECURITY –û–¢–ß–ï–¢:`);
    console.log(`=`.repeat(70));
    
    const test1Secure = maliciousSimulation1.value.err !== null;
    const test2Secure = maliciousSimulation2.value.err !== null; 
    const test3Secure = maliciousSimulation3.value.err !== null;
    
    console.log(`üõ°Ô∏è  Test 1 (Investor ‚Üí Investor –∫—Ä–∞–∂–∞): ${test1Secure ? '‚úÖ –ó–ê–©–ò–©–ï–ù' : '‚ùå –£–Ø–ó–í–ò–ú'}`);
    console.log(`üõ°Ô∏è  Test 2 (SOL redirect): ${test2Secure ? '‚úÖ –ó–ê–©–ò–©–ï–ù' : '‚ö†Ô∏è –í–û–ó–ú–û–ñ–ù–ê –ü–†–û–ë–õ–ï–ú–ê'}`);
    console.log(`üõ°Ô∏è  Test 3 (–°–ª—É—á–∞–π–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å): ${test3Secure ? '‚úÖ –ó–ê–©–ò–©–ï–ù' : '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–Ø–ó–í–ò–ú–û–°–¢–¨'}`);
    
    if (test1Secure && test2Secure && test3Secure) {
      console.log(`\nüéâ –í–ï–†–î–ò–ö–¢: –ö–û–ù–¢–†–ê–ö–¢ –ë–ï–ó–û–ü–ê–°–ï–ù –î–õ–Ø MAINNET! üöÄ`);
    } else {
      console.log(`\nüö® –í–ï–†–î–ò–ö–¢: –ö–û–ù–¢–†–ê–ö–¢ –¢–†–ï–ë–£–ï–¢ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô!`);
    }
    
  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:', error.message);
  }
}

main().catch(console.error);