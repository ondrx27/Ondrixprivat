const {
  Connection,
  PublicKey,
  Keypair,
  LAMPORTS_PER_SOL,
  Transaction,
  sendAndConfirmTransaction,
} = require('@solana/web3.js');
const {
  createMint,
  getOrCreateAssociatedTokenAccount,
  mintTo,
  getAccount,
  getAssociatedTokenAddress,
} = require('@solana/spl-token');
const {
  PROGRAM_ID,
  findGlobalEscrowPDA,
  findInvestorPDA,
  findTokenVaultPDA,
  findSolVaultPDA,
  createInitializeEscrowInstruction,
  createDepositSolInstruction,
  createGetEscrowStatusInstruction,
  sleep,
} = require('./dist/tests/utils.js');
const connection = new Connection('https://api.devnet.solana.com', 'confirmed');

// –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –≤ base58 —Ñ–æ—Ä–º–∞—Ç–µ (–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
const INVESTOR1_PRIVATE = 'rKAMdrQgnE3zvQdLK4MtXBQqvwhMLoDnbgyAM7heWeM3pUoyA6sWFLSixp2dySt3SiYskQdaU6wKHNh1X3r77pZ'; // 9c9FyNTe5T9m2dkp6zbvN67sGzydS1KWzEDWm1nKSP5w
const INVESTOR2_PRIVATE = '5pKECKQTz61EjiA6bgUj82EgKqmR3DCmWvKHoBhTC3NxXMPwAccfVwbWXr2QVedgbWanDsZQpxPPujtVi7TWZRMp'; // DZJy7sWk8pgt5VZnaP7PWtwEHjzg84j3kr5cGKwTJ67G

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base58
function decodeBase58(encoded) {
  const ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
  const BASE = 58;
  
  let num = 0n;
  for (let i = 0; i < encoded.length; i++) {
    const char = encoded[i];
    const index = ALPHABET.indexOf(char);
    if (index === -1) throw new Error('Invalid character in base58 string');
    num = num * BigInt(BASE) + BigInt(index);
  }
  
  // Convert bigint to bytes
  let hex = num.toString(16);
  if (hex.length % 2 !== 0) hex = '0' + hex;
  
  const bytes = [];
  for (let i = 0; i < hex.length; i += 2) {
    bytes.push(parseInt(hex.substr(i, 2), 16));
  }
  
  // Handle leading zeros
  let leadingZeros = 0;
  for (let i = 0; i < encoded.length; i++) {
    if (encoded[i] === '1') leadingZeros++;
    else break;
  }
  
  return new Uint8Array([...Array(leadingZeros).fill(0), ...bytes]);
}

async function main() {
  console.log('üß™ V3 ONDRIX ESCROW - –ü–û–õ–ù–´–ô –ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ –° –†–ï–ê–õ–¨–ù–´–ú–ò –ò–ù–í–ï–°–¢–û–†–ê–ú–ò');
  console.log('='.repeat(90));
  console.log(`üìç V3 Program ID: ${PROGRAM_ID.toString()}`);
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∏–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
  const investor1 = Keypair.fromSecretKey(decodeBase58(INVESTOR1_PRIVATE));
  const investor2 = Keypair.fromSecretKey(decodeBase58(INVESTOR2_PRIVATE));
  const initializer = Keypair.generate();
  const recipient = new PublicKey('EJ6bPvsTXfzk1WS9eXKDQ3KL5x9a2wy15XPxL48FdeAc');
  
  console.log('\nüë• –£–ß–ê–°–¢–ù–ò–ö–ò:');
  console.log(`üîë Initializer: ${initializer.publicKey.toString()}`);
  console.log(`üí∞ Investor 1: ${investor1.publicKey.toString()} (9c9FyNTe5T9...)`);
  console.log(`üí∞ Investor 2: ${investor2.publicKey.toString()} (DZJy7sWk8p...)`);
  console.log(`üéØ Recipient: ${recipient.toString()}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –±–∞–ª–∞–Ω—Å—ã
  console.log('\nüí∞ –ù–ê–ß–ê–õ–¨–ù–´–ï –ë–ê–õ–ê–ù–°–´:');
  let inv1Balance = await connection.getBalance(investor1.publicKey);
  let inv2Balance = await connection.getBalance(investor2.publicKey);
  let recipientBalance = await connection.getBalance(recipient);
  let initBalance = await connection.getBalance(initializer.publicKey);
  
  console.log(`Initializer: ${(initBalance / LAMPORTS_PER_SOL).toFixed(6)} SOL`);
  console.log(`Investor 1: ${(inv1Balance / LAMPORTS_PER_SOL).toFixed(6)} SOL`);
  console.log(`Investor 2: ${(inv2Balance / LAMPORTS_PER_SOL).toFixed(6)} SOL`);
  console.log(`Recipient: ${(recipientBalance / LAMPORTS_PER_SOL).toFixed(6)} SOL`);
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º investor1 –∫–∞–∫ initializer –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  let actualInitializer = initializer;
  if (initBalance < 0.5 * LAMPORTS_PER_SOL) {
    console.log('‚ö†Ô∏è Initializer –±–µ–∑ SOL, –∏—Å–ø–æ–ª—å–∑—É–µ–º Investor 1 –∫–∞–∫ initializer');
    actualInitializer = investor1;
  } else {
    // –ü–æ–ø–æ–ª–Ω—è–µ–º initializer —á–µ—Ä–µ–∑ airdrop
    try {
      await connection.requestAirdrop(initializer.publicKey, 1 * LAMPORTS_PER_SOL);
      await sleep(2000);
      console.log('‚úÖ Initializer –ø–æ–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ airdrop');
    } catch (e) {
      console.log('‚ö†Ô∏è Airdrop failed, –∏—Å–ø–æ–ª—å–∑—É–µ–º Investor 1 –∫–∞–∫ initializer');
      actualInitializer = investor1;
    }
  }
  
  // ====== –≠–¢–ê–ü 1: –°–û–ó–î–ê–ù–ò–ï –¢–û–ö–ï–ù–ê –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ======
  console.log('\nü™ô –≠–¢–ê–ü 1: –°–û–ó–î–ê–ù–ò–ï –¢–û–ö–ï–ù–ê');
  console.log('-'.repeat(50));
  
  const tokenMint = await createMint(
    connection,
    actualInitializer,
    actualInitializer.publicKey,
    null,
    9 // TOKEN_DECIMALS = 9 –≤ V3
  );
  console.log(`‚úÖ Token Mint —Å–æ–∑–¥–∞–Ω: ${tokenMint.toString()}`);
  
  // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –∏ –º–∏–Ω—Ç–∏–º —Ç–æ–∫–µ–Ω—ã
  const initializerTokenAccount = await getOrCreateAssociatedTokenAccount(
    connection,
    actualInitializer,
    tokenMint,
    actualInitializer.publicKey
  );
  
  const tokenSupply = BigInt(1000000 * Math.pow(10, 9)); // 1M tokens with 9 decimals
  await mintTo(
    connection,
    actualInitializer,
    tokenMint,
    initializerTokenAccount.address,
    actualInitializer,
    tokenSupply
  );
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${tokenSupply / BigInt(Math.pow(10, 9))} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —ç—Å–∫—Ä–æ—É`);
  
  // ====== –≠–¢–ê–ü 2: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –≠–°–ö–†–û–£ ======
  console.log('\nüìã –≠–¢–ê–ü 2: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –≠–°–ö–†–û–£');
  console.log('-'.repeat(50));
  
  const tokenAmountForEscrow = BigInt(500000 * Math.pow(10, 9)); // 500K tokens
  const lockDuration = BigInt(30 * 24 * 60 * 60); // 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  
  const initializeInstruction = await createInitializeEscrowInstruction(
    actualInitializer.publicKey,
    tokenMint,
    initializerTokenAccount.address,
    recipient,
    tokenAmountForEscrow,
    lockDuration,
    PROGRAM_ID
  );
  
  const initTransaction = new Transaction().add(initializeInstruction);
  
  try {
    const initTxSignature = await sendAndConfirmTransaction(
      connection,
      initTransaction,
      [actualInitializer],
      { commitment: 'confirmed' }
    );
    console.log(`‚úÖ Escrow –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${initTxSignature}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ PDA
  const [globalEscrowPDA] = findGlobalEscrowPDA(actualInitializer.publicKey, tokenMint, PROGRAM_ID);
  const [tokenVaultPDA] = findTokenVaultPDA(globalEscrowPDA, PROGRAM_ID);
  
  console.log(`üìç Global Escrow PDA: ${globalEscrowPDA.toString()}`);
  console.log(`üìç Token Vault PDA: ${tokenVaultPDA.toString()}`);
  
  await sleep(3000);
  
  // ====== –≠–¢–ê–ü 3: –î–ï–ü–û–ó–ò–¢ INVESTOR 1 ======
  console.log('\nüí∞ –≠–¢–ê–ü 3: –î–ï–ü–û–ó–ò–¢ INVESTOR 1');
  console.log('-'.repeat(50));
  
  const investor1SolAmount = BigInt(1.0 * LAMPORTS_PER_SOL); // 1.0 SOL
  
  if (inv1Balance < investor1SolAmount + BigInt(0.1 * LAMPORTS_PER_SOL)) {
    console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL —É Investor 1 –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞');
    return;
  }
  
  console.log(`üíé Investor 1 –≤–Ω–æ—Å–∏—Ç ${investor1SolAmount / BigInt(LAMPORTS_PER_SOL)} SOL...`);
  
  const depositInstruction1 = await createDepositSolInstruction(
    investor1.publicKey,
    globalEscrowPDA,
    tokenMint,
    recipient,
    investor1SolAmount,
    PROGRAM_ID
  );
  
  const depositTransaction1 = new Transaction().add(depositInstruction1);
  
  try {
    const depositTx1 = await sendAndConfirmTransaction(
      connection,
      depositTransaction1,
      [investor1],
      { commitment: 'confirmed' }
    );
    console.log(`‚úÖ Investor 1 –¥–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–µ–Ω: ${depositTx1}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ Investor 1:', error);
    console.error('Error details:', error.logs);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã Investor 1
  await sleep(3000);
  console.log('\nü™ô –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–û–í INVESTOR 1:');
  const investor1TokenAccount = await getAssociatedTokenAddress(tokenMint, investor1.publicKey);
  try {
    const investor1TokenBalance = await connection.getTokenAccountBalance(investor1TokenAccount);
    console.log(`‚úÖ Investor 1 –ø–æ–ª—É—á–∏–ª: ${investor1TokenBalance.value.uiAmount} —Ç–æ–∫–µ–Ω–æ–≤`);
  } catch (e) {
    console.log('‚ö†Ô∏è Investor 1 —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)');
  }
  
  // ====== –≠–¢–ê–ü 4: –î–ï–ü–û–ó–ò–¢ INVESTOR 2 ======
  console.log('\nüí∞ –≠–¢–ê–ü 4: –î–ï–ü–û–ó–ò–¢ INVESTOR 2');
  console.log('-'.repeat(50));
  
  const investor2SolAmount = BigInt(1.5 * LAMPORTS_PER_SOL); // 1.5 SOL
  
  if (inv2Balance < investor2SolAmount + BigInt(0.1 * LAMPORTS_PER_SOL)) {
    console.log('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL —É Investor 2 –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞');
  } else {
    console.log(`üíé Investor 2 –≤–Ω–æ—Å–∏—Ç ${investor2SolAmount / BigInt(LAMPORTS_PER_SOL)} SOL...`);
    
    const depositInstruction2 = await createDepositSolInstruction(
      investor2.publicKey,
      globalEscrowPDA,
      tokenMint,
      recipient,
      investor2SolAmount,
      PROGRAM_ID
    );
    
    const depositTransaction2 = new Transaction().add(depositInstruction2);
    
    try {
      const depositTx2 = await sendAndConfirmTransaction(
        connection,
        depositTransaction2,
        [investor2],
        { commitment: 'confirmed' }
      );
      console.log(`‚úÖ Investor 2 –¥–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–µ–Ω: ${depositTx2}`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ Investor 2:', error);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã Investor 2
    await sleep(3000);
    console.log('\nü™ô –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–û–í INVESTOR 2:');
    const investor2TokenAccount = await getAssociatedTokenAddress(tokenMint, investor2.publicKey);
    try {
      const investor2TokenBalance = await connection.getTokenAccountBalance(investor2TokenAccount);
      console.log(`‚úÖ Investor 2 –ø–æ–ª—É—á–∏–ª: ${investor2TokenBalance.value.uiAmount} —Ç–æ–∫–µ–Ω–æ–≤`);
    } catch (e) {
      console.log('‚ö†Ô∏è Investor 2 —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)');
    }
  }
  
  // ====== –≠–¢–ê–ü 5: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í ======
  console.log('\nüìä –≠–¢–ê–ü 5: –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í');
  console.log('-'.repeat(50));
  
  // –ù–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
  const finalInv1Balance = await connection.getBalance(investor1.publicKey);
  const finalInv2Balance = await connection.getBalance(investor2.publicKey);
  const finalRecipientBalance = await connection.getBalance(recipient);
  
  console.log('\nüíé –ò–ó–ú–ï–ù–ï–ù–ò–Ø SOL –ë–ê–õ–ê–ù–°–û–í:');
  console.log(`Investor 1: ${(finalInv1Balance / LAMPORTS_PER_SOL).toFixed(6)} SOL (–±—ã–ª–æ: ${(inv1Balance / LAMPORTS_PER_SOL).toFixed(6)}) [Œî: ${((finalInv1Balance - inv1Balance) / LAMPORTS_PER_SOL).toFixed(6)}]`);
  console.log(`Investor 2: ${(finalInv2Balance / LAMPORTS_PER_SOL).toFixed(6)} SOL (–±—ã–ª–æ: ${(inv2Balance / LAMPORTS_PER_SOL).toFixed(6)}) [Œî: ${((finalInv2Balance - inv2Balance) / LAMPORTS_PER_SOL).toFixed(6)}]`);
  console.log(`Recipient: ${(finalRecipientBalance / LAMPORTS_PER_SOL).toFixed(6)} SOL (–±—ã–ª–æ: ${(recipientBalance / LAMPORTS_PER_SOL).toFixed(6)}) [Œî: +${((finalRecipientBalance - recipientBalance) / LAMPORTS_PER_SOL).toFixed(6)}]`);
  
  // –¢–æ–∫–µ–Ω –±–∞–ª–∞–Ω—Å—ã
  console.log('\nü™ô –ò–¢–û–ì–û–í–´–ï TOKEN –ë–ê–õ–ê–ù–°–´:');
  try {
    const inv1TokenAccount = await getAssociatedTokenAddress(tokenMint, investor1.publicKey);
    const inv1TokenBalance = await connection.getTokenAccountBalance(inv1TokenAccount);
    console.log(`Investor 1: ${inv1TokenBalance.value.uiAmount} tokens`);
  } catch (e) {
    console.log('Investor 1: 0 tokens (–∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω)');
  }
  
  try {
    const inv2TokenAccount = await getAssociatedTokenAddress(tokenMint, investor2.publicKey);
    const inv2TokenBalance = await connection.getTokenAccountBalance(inv2TokenAccount);
    console.log(`Investor 2: ${inv2TokenBalance.value.uiAmount} tokens`);
  } catch (e) {
    console.log('Investor 2: 0 tokens (–∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω)');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Token Vault
  try {
    const vaultBalance = await connection.getTokenAccountBalance(tokenVaultPDA);
    console.log(`Token Vault (remaining): ${vaultBalance.value.uiAmount} tokens`);
  } catch (e) {
    console.log('Token Vault: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è');
  }
  
  // ====== –≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê –ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–• SOL VAULTS ======
  console.log('\nüîí –≠–¢–ê–ü 6: –ü–†–û–í–ï–†–ö–ê TIME-LOCKED SOL VAULTS');
  console.log('-'.repeat(50));
  
  const [investor1PDA] = findInvestorPDA(investor1.publicKey, globalEscrowPDA, PROGRAM_ID);
  const [investor2PDA] = findInvestorPDA(investor2.publicKey, globalEscrowPDA, PROGRAM_ID);
  const [solVault1PDA] = findSolVaultPDA(investor1.publicKey, globalEscrowPDA, PROGRAM_ID);
  const [solVault2PDA] = findSolVaultPDA(investor2.publicKey, globalEscrowPDA, PROGRAM_ID);
  
  console.log(`üìç Investor 1 PDA: ${investor1PDA.toString()}`);
  console.log(`üìç Investor 2 PDA: ${investor2PDA.toString()}`);
  
  const solVault1Balance = await connection.getBalance(solVault1PDA);
  const solVault2Balance = await connection.getBalance(solVault2PDA);
  
  console.log(`üîí SOL Vault 1 (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ): ${(solVault1Balance / LAMPORTS_PER_SOL).toFixed(6)} SOL`);
  console.log(`üîí SOL Vault 2 (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ): ${(solVault2Balance / LAMPORTS_PER_SOL).toFixed(6)} SOL`);
  console.log(`üìç SOL Vault 1 PDA: ${solVault1PDA.toString()}`);
  console.log(`üìç SOL Vault 2 PDA: ${solVault2PDA.toString()}`);
  
  // ====== –†–ï–ó–£–õ–¨–¢–ê–¢ ======
  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–û–õ–ù–û–ì–û –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê V3:');
  console.log('='.repeat(90));
  console.log(`üìç Program ID: ${PROGRAM_ID.toString()}`);
  console.log(`ü™ô Token Mint: ${tokenMint.toString()}`);
  console.log(`üìã Global Escrow: ${globalEscrowPDA.toString()}`);
  
  console.log('\n‚úÖ –£–°–ü–ï–®–ù–û –í–´–ü–û–õ–ù–ï–ù–û:');
  console.log('1. ‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å 9 decimals');
  console.log('2. ‚úÖ Escrow –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å 500K —Ç–æ–∫–µ–Ω–∞–º–∏');
  console.log('3. ‚úÖ Investor 1 –≤–Ω–µ—Å 1.0 SOL ‚Üí –ø–æ–ª—É—á–∏–ª —Ç–æ–∫–µ–Ω—ã');
  console.log('4. ‚úÖ Investor 2 –≤–Ω–µ—Å 1.5 SOL ‚Üí –ø–æ–ª—É—á–∏–ª —Ç–æ–∫–µ–Ω—ã');
  console.log('5. ‚úÖ Recipient –ø–æ–ª—É—á–∏–ª 50% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ');
  console.log('6. ‚úÖ 50% –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ time-locked vaults');
  console.log('7. ‚úÖ –í—Å–µ PDA –∞–∫–∫–∞—É–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç');
  
  console.log('\nüîí TIME-LOCKED –°–ò–°–¢–ï–ú–ê:');
  console.log('‚Ä¢ –ö–∞–∂–¥—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä –∏–º–µ–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä (30 –¥–Ω–µ–π)');
  console.log('‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –º–æ–º–µ–Ω—Ç–∞ –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞');
  console.log('‚Ä¢ –ü–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ recipient –º–æ–∂–µ—Ç –∑–∞–±—Ä–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é —á–∞—Å—Ç—å');
  console.log('‚Ä¢ –ö—É—Ä—Å SOL/USD –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Chainlink oracle');
  
  console.log('\nüöÄ V3 –ö–û–ù–¢–†–ê–ö–¢ –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!');
  console.log('–í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã ‚ú®');
}

main().catch(console.error);