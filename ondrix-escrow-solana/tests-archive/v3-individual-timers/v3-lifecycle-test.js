const {
  Connection,
  PublicKey,
  Keypair,
  LAMPORTS_PER_SOL,
  Transaction,
  sendAndConfirmTransaction,
} = require('@solana/web3.js');
const {
  createMint,
  getOrCreateAssociatedTokenAccount,
  mintTo,
  getAccount,
  getAssociatedTokenAddress,
} = require('@solana/spl-token');
const {
  PROGRAM_ID,
  findGlobalEscrowPDA,
  findInvestorPDA,
  findTokenVaultPDA,
  findSolVaultPDA,
  createInitializeEscrowInstruction,
  createDepositSolInstruction,
  createGetEscrowStatusInstruction,
  fundAccount,
  sleep,
} = require('./dist/tests/utils.js');

const connection = new Connection('https://api.devnet.solana.com', 'confirmed');

async function main() {
  console.log('üß™ V3 ONDRIX ESCROW - –ü–û–õ–ù–´–ô –ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ');
  console.log('='.repeat(80));
  console.log(`üìç V3 Program ID: ${PROGRAM_ID.toString()}`);
  
  // –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  const initializer = Keypair.generate();
  const investor1 = Keypair.generate();
  const investor2 = Keypair.generate();
  const recipient = Keypair.generate();
  
  console.log('\nüë• –£–ß–ê–°–¢–ù–ò–ö–ò:');
  console.log(`üîë Initializer: ${initializer.publicKey.toString()}`);
  console.log(`üí∞ Investor 1: ${investor1.publicKey.toString()}`);
  console.log(`üí∞ Investor 2: ${investor2.publicKey.toString()}`);
  console.log(`üéØ Recipient: ${recipient.publicKey.toString()}`);
  
  // –ü–æ–ø–æ–ª–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã —á–µ—Ä–µ–∑ airdrop
  console.log('\nüíµ –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–û–í –ß–ï–†–ï–ó AIRDROP...');
  
  try {
    await connection.requestAirdrop(initializer.publicKey, 2 * LAMPORTS_PER_SOL);
    await sleep(2000);
    await connection.requestAirdrop(investor1.publicKey, 5 * LAMPORTS_PER_SOL);
    await sleep(2000);
    await connection.requestAirdrop(investor2.publicKey, 3 * LAMPORTS_PER_SOL);
    await sleep(2000);
    await connection.requestAirdrop(recipient.publicKey, 0.1 * LAMPORTS_PER_SOL);
    await sleep(2000);
    console.log('‚úÖ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ airdrop');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ airdrop:', error);
    console.log('üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ SOL –Ω–∞ devnet –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –≤—Ä—É—á–Ω—É—é');
  }
  
  await sleep(2000);
  
  // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
  console.log('\nü™ô –°–û–ó–î–ê–ù–ò–ï –¢–û–ö–ï–ù–ê...');
  const tokenMint = await createMint(
    connection,
    initializer,
    initializer.publicKey,
    null,
    9 // TOKEN_DECIMALS = 9 –≤ V3
  );
  console.log(`Token Mint: ${tokenMint.toString()}`);
  
  // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è initializer –∏ –º–∏–Ω—Ç–∏–º —Ç–æ–∫–µ–Ω—ã
  const initializerTokenAccount = await getOrCreateAssociatedTokenAccount(
    connection,
    initializer,
    tokenMint,
    initializer.publicKey
  );
  
  const tokenSupply = BigInt(1000000 * Math.pow(10, 9)); // 1M tokens with 9 decimals
  await mintTo(
    connection,
    initializer,
    tokenMint,
    initializerTokenAccount.address,
    initializer,
    tokenSupply
  );
  
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${tokenSupply / BigInt(Math.pow(10, 9))} —Ç–æ–∫–µ–Ω–æ–≤`);
  
  // ====== –≠–¢–ê–ü 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –≠–°–ö–†–û–£ ======
  console.log('\nüìã –≠–¢–ê–ü 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –≠–°–ö–†–û–£');
  console.log('-'.repeat(50));
  
  const tokenAmountForEscrow = BigInt(500000 * Math.pow(10, 9)); // 500K tokens
  const lockDuration = BigInt(30 * 24 * 60 * 60); // 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  
  const initializeInstruction = await createInitializeEscrowInstruction(
    initializer.publicKey,
    tokenMint,
    initializerTokenAccount.address,
    recipient.publicKey,
    tokenAmountForEscrow,
    lockDuration,
    PROGRAM_ID
  );
  
  const initTransaction = new Transaction().add(initializeInstruction);
  
  try {
    const initTxSignature = await sendAndConfirmTransaction(
      connection,
      initTransaction,
      [initializer],
      { commitment: 'confirmed' }
    );
    console.log(`‚úÖ Escrow –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${initTxSignature}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    return;
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ PDA
  const [globalEscrowPDA] = findGlobalEscrowPDA(initializer.publicKey, tokenMint, PROGRAM_ID);
  const [tokenVaultPDA] = findTokenVaultPDA(globalEscrowPDA, PROGRAM_ID);
  
  console.log(`üìç Global Escrow PDA: ${globalEscrowPDA.toString()}`);
  console.log(`üìç Token Vault PDA: ${tokenVaultPDA.toString()}`);
  
  await sleep(2000);
  
  // ====== –≠–¢–ê–ü 2: –î–ï–ü–û–ó–ò–¢ INVESTOR 1 ======
  console.log('\nüí∞ –≠–¢–ê–ü 2: –î–ï–ü–û–ó–ò–¢ INVESTOR 1');
  console.log('-'.repeat(50));
  
  const investor1SolAmount = BigInt(1.5 * LAMPORTS_PER_SOL); // 1.5 SOL
  
  const depositInstruction1 = await createDepositSolInstruction(
    investor1.publicKey,
    globalEscrowPDA,
    tokenMint,
    recipient.publicKey,
    investor1SolAmount,
    PROGRAM_ID
  );
  
  const depositTransaction1 = new Transaction().add(depositInstruction1);
  
  try {
    const depositTx1 = await sendAndConfirmTransaction(
      connection,
      depositTransaction1,
      [investor1],
      { commitment: 'confirmed' }
    );
    console.log(`‚úÖ Investor 1 –≤–Ω–µ—Å ${investor1SolAmount / BigInt(LAMPORTS_PER_SOL)} SOL: ${depositTx1}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ Investor 1:', error);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã Investor 1
  await sleep(3000);
  const investor1TokenAccount = await getAssociatedTokenAddress(tokenMint, investor1.publicKey);
  try {
    const investor1TokenBalance = await connection.getTokenAccountBalance(investor1TokenAccount);
    console.log(`ü™ô Investor 1 –ø–æ–ª—É—á–∏–ª —Ç–æ–∫–µ–Ω–æ–≤: ${investor1TokenBalance.value.uiAmount}`);
  } catch (e) {
    console.log('ü™ô Investor 1 —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π');
  }
  
  // ====== –≠–¢–ê–ü 3: –î–ï–ü–û–ó–ò–¢ INVESTOR 2 ======
  console.log('\nüí∞ –≠–¢–ê–ü 3: –î–ï–ü–û–ó–ò–¢ INVESTOR 2');
  console.log('-'.repeat(50));
  
  const investor2SolAmount = BigInt(2.0 * LAMPORTS_PER_SOL); // 2.0 SOL
  
  const depositInstruction2 = await createDepositSolInstruction(
    investor2.publicKey,
    globalEscrowPDA,
    tokenMint,
    recipient.publicKey,
    investor2SolAmount,
    PROGRAM_ID
  );
  
  const depositTransaction2 = new Transaction().add(depositInstruction2);
  
  try {
    const depositTx2 = await sendAndConfirmTransaction(
      connection,
      depositTransaction2,
      [investor2],
      { commitment: 'confirmed' }
    );
    console.log(`‚úÖ Investor 2 –≤–Ω–µ—Å ${investor2SolAmount / BigInt(LAMPORTS_PER_SOL)} SOL: ${depositTx2}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞ Investor 2:', error);
    return;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã Investor 2
  await sleep(3000);
  const investor2TokenAccount = await getAssociatedTokenAddress(tokenMint, investor2.publicKey);
  try {
    const investor2TokenBalance = await connection.getTokenAccountBalance(investor2TokenAccount);
    console.log(`ü™ô Investor 2 –ø–æ–ª—É—á–∏–ª —Ç–æ–∫–µ–Ω–æ–≤: ${investor2TokenBalance.value.uiAmount}`);
  } catch (e) {
    console.log('ü™ô Investor 2 —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π');
  }
  
  // ====== –≠–¢–ê–ü 4: –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í ======
  console.log('\nüìä –≠–¢–ê–ü 4: –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ë–ê–õ–ê–ù–°–û–í');
  console.log('-'.repeat(50));
  
  // –ë–∞–ª–∞–Ω—Å—ã –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
  const investor1Sol = await connection.getBalance(investor1.publicKey);
  const investor2Sol = await connection.getBalance(investor2.publicKey);
  const recipientSol = await connection.getBalance(recipient.publicKey);
  
  console.log('\nüíé SOL –ë–ê–õ–ê–ù–°–´:');
  console.log(`Investor 1: ${(investor1Sol / LAMPORTS_PER_SOL).toFixed(6)} SOL`);
  console.log(`Investor 2: ${(investor2Sol / LAMPORTS_PER_SOL).toFixed(6)} SOL`);
  console.log(`Recipient: ${(recipientSol / LAMPORTS_PER_SOL).toFixed(6)} SOL`);
  
  // –¢–æ–∫–µ–Ω –±–∞–ª–∞–Ω—Å—ã
  console.log('\nü™ô TOKEN –ë–ê–õ–ê–ù–°–´:');
  try {
    const inv1Balance = await connection.getTokenAccountBalance(investor1TokenAccount);
    console.log(`Investor 1: ${inv1Balance.value.uiAmount} tokens`);
  } catch (e) {
    console.log('Investor 1: 0 tokens (–∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω)');
  }
  
  try {
    const inv2Balance = await connection.getTokenAccountBalance(investor2TokenAccount);
    console.log(`Investor 2: ${inv2Balance.value.uiAmount} tokens`);
  } catch (e) {
    console.log('Investor 2: 0 tokens (–∞–∫–∫–∞—É–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω)');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Token Vault
  try {
    const vaultBalance = await connection.getTokenAccountBalance(tokenVaultPDA);
    console.log(`Token Vault: ${vaultBalance.value.uiAmount} tokens`);
  } catch (e) {
    console.log('Token Vault: 0 tokens –∏–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è');
  }
  
  // ====== –≠–¢–ê–ü 5: –°–¢–ê–¢–£–° –≠–°–ö–†–û–£ ======
  console.log('\nüìã –≠–¢–ê–ü 5: –°–¢–ê–¢–£–° –≠–°–ö–†–û–£');
  console.log('-'.repeat(50));
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ global escrow –∞–∫–∫–∞—É–Ω—Ç–∞
    const escrowAccountInfo = await connection.getAccountInfo(globalEscrowPDA);
    if (escrowAccountInfo) {
      console.log(`‚úÖ Global Escrow –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      console.log(`üì¶ Data size: ${escrowAccountInfo.data.length} bytes`);
      console.log(`üëë Owner: ${escrowAccountInfo.owner.toString()}`);
    } else {
      console.log('‚ùå Global Escrow –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–µ—Å—Ç–æ—Ä –∞–∫–∫–∞—É–Ω—Ç—ã
    const [investor1PDA] = findInvestorPDA(investor1.publicKey, globalEscrowPDA, PROGRAM_ID);
    const [investor2PDA] = findInvestorPDA(investor2.publicKey, globalEscrowPDA, PROGRAM_ID);
    
    const inv1AccountInfo = await connection.getAccountInfo(investor1PDA);
    const inv2AccountInfo = await connection.getAccountInfo(investor2PDA);
    
    console.log(`üìç Investor 1 PDA: ${investor1PDA.toString()}`);
    console.log(`‚úÖ Investor 1 –∞–∫–∫–∞—É–Ω—Ç: ${inv1AccountInfo ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
    
    console.log(`üìç Investor 2 PDA: ${investor2PDA.toString()}`);  
    console.log(`‚úÖ Investor 2 –∞–∫–∫–∞—É–Ω—Ç: ${inv2AccountInfo ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º SOL Vaults
    const [solVault1PDA] = findSolVaultPDA(investor1.publicKey, globalEscrowPDA, PROGRAM_ID);
    const [solVault2PDA] = findSolVaultPDA(investor2.publicKey, globalEscrowPDA, PROGRAM_ID);
    
    const solVault1Balance = await connection.getBalance(solVault1PDA);
    const solVault2Balance = await connection.getBalance(solVault2PDA);
    
    console.log(`üí∞ SOL Vault 1: ${(solVault1Balance / LAMPORTS_PER_SOL).toFixed(6)} SOL`);
    console.log(`üí∞ SOL Vault 2: ${(solVault2Balance / LAMPORTS_PER_SOL).toFixed(6)} SOL`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
  }
  
  // ====== –†–ï–ó–£–õ–¨–¢–ê–¢ ======
  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('='.repeat(80));
  console.log('‚úÖ Escrow –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  console.log('‚úÖ Investor 1 –≤–Ω–µ—Å 1.5 SOL –∏ –ø–æ–ª—É—á–∏–ª —Ç–æ–∫–µ–Ω—ã');
  console.log('‚úÖ Investor 2 –≤–Ω–µ—Å 2.0 SOL –∏ –ø–æ–ª—É—á–∏–ª —Ç–æ–∫–µ–Ω—ã'); 
  console.log('‚úÖ Recipient –ø–æ–ª—É—á–∏–ª 50% –æ—Ç –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞');
  console.log('‚úÖ 50% SOL –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –≤ time-locked vaults');
  console.log('‚úÖ –í—Å–µ PDA –∞–∫–∫–∞—É–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('\nüîí –ë–õ–û–ö–ò–†–û–í–ö–ê: 30 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞');
  console.log('üöÄ V3 –ö–û–ù–¢–†–ê–ö–¢ –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!');
}

main().catch(console.error);